package presentation.controller;

import application.usecases.*;
import domain.entities.Usuario;

import java.util.List;
import java.util.Scanner;

/**
 * Controller especializado para la gesti√≥n de usuarios.
 * 
 * PRINCIPIOS DE CLEAN ARCHITECTURE:
 * - Responsabilidad √∫nica: solo maneja operaciones de usuarios
 * - Separaci√≥n de concerns por contexto de dominio
 * - Delega l√≥gica de negocio a casos de uso espec√≠ficos
 */
public class UsuarioController {
    
    private final Scanner scanner;
    private final RegistrarUsuarioCasoUso registrarUsuarioCasoUso;
    private final BuscarUsuariosCasoUso buscarUsuariosCasoUso;
    private final ActualizarUsuarioCasoUso actualizarUsuarioCasoUso;
    private final EliminarUsuarioCasoUso eliminarUsuarioCasoUso;
    
    public UsuarioController(Scanner scanner,
                           RegistrarUsuarioCasoUso registrarUsuarioCasoUso,
                           BuscarUsuariosCasoUso buscarUsuariosCasoUso,
                           ActualizarUsuarioCasoUso actualizarUsuarioCasoUso,
                           EliminarUsuarioCasoUso eliminarUsuarioCasoUso) {
        this.scanner = scanner;
        this.registrarUsuarioCasoUso = registrarUsuarioCasoUso;
        this.buscarUsuariosCasoUso = buscarUsuariosCasoUso;
        this.actualizarUsuarioCasoUso = actualizarUsuarioCasoUso;
        this.eliminarUsuarioCasoUso = eliminarUsuarioCasoUso;
    }
    
    public void mostrarMenu() {
        while (true) {
            System.out.println("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GESTI√ìN DE USUARIOS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            System.out.println("‚îÇ 1. ‚ûï Registrar Usuario                   ‚îÇ");
            System.out.println("‚îÇ 2. üîç Buscar Usuarios                     ‚îÇ");
            System.out.println("‚îÇ 3. ‚úèÔ∏è  Actualizar Usuario                  ‚îÇ");
            System.out.println("‚îÇ 4. üóëÔ∏è  Eliminar Usuario                    ‚îÇ");
            System.out.println("‚îÇ 0. ‚¨ÖÔ∏è  Volver al Men√∫ Principal           ‚îÇ");
            System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
            System.out.print("Selecciona una opci√≥n: ");
            
            int opcion = leerOpcion();
            
            try {
                switch (opcion) {
                    case 1 -> registrarUsuario();
                    case 2 -> buscarUsuarios();
                    case 3 -> actualizarUsuario();
                    case 4 -> eliminarUsuario();
                    case 0 -> { return; }
                    default -> System.out.println("‚ùå Opci√≥n no v√°lida");
                }
            } catch (Exception e) {
                System.out.println("‚ùå Error: " + e.getMessage());
                pausar();
            }
        }
    }
    
    private void registrarUsuario() {
        System.out.println("\n‚ïê‚ïê‚ïê REGISTRAR NUEVO USUARIO ‚ïê‚ïê‚ïê");
        
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine().trim();
        
        System.out.print("Apellido: ");
        String apellido = scanner.nextLine().trim();
        
        System.out.print("Email: ");
        String email = scanner.nextLine().trim();
        
        try {
            Usuario usuario = registrarUsuarioCasoUso.ejecutar(nombre, apellido, email);
            System.out.println("‚úÖ Usuario registrado exitosamente:");
            mostrarUsuario(usuario);
        } catch (Exception e) {
            System.out.println("‚ùå Error al registrar usuario: " + e.getMessage());
        }
        
        pausar();
    }
    
    private void buscarUsuarios() {
        System.out.println("\n‚ïê‚ïê‚ïê BUSCAR USUARIOS ‚ïê‚ïê‚ïê");
        System.out.print("Criterio de b√∫squeda (nombre, apellido o email): ");
        String criterio = scanner.nextLine().trim();
        
        try {
            List<Usuario> usuarios = buscarUsuariosCasoUso.ejecutar(criterio);
            
            if (usuarios.isEmpty()) {
                System.out.println("‚ùå No se encontraron usuarios con ese criterio.");
            } else {
                System.out.println("üìã Usuarios encontrados:");
                System.out.println("‚îÄ".repeat(60));
                for (int i = 0; i < usuarios.size(); i++) {
                    System.out.printf("%d. ", i + 1);
                    mostrarUsuario(usuarios.get(i));
                    System.out.println();
                }
            }
        } catch (Exception e) {
            System.out.println("‚ùå Error al buscar usuarios: " + e.getMessage());
        }
        
        pausar();
    }
    
    private void actualizarUsuario() {
        System.out.println("\n‚ïê‚ïê‚ïê ACTUALIZAR USUARIO ‚ïê‚ïê‚ïê");
        
        Usuario usuario = seleccionarUsuario();
        if (usuario == null) return;
        
        System.out.println("Datos actuales:");
        mostrarUsuario(usuario);
        
        System.out.println("\nActualmente solo se puede actualizar el email del usuario.");
        
        System.out.print("Nuevo email [" + usuario.getEmail() + "]: ");
        String nuevoEmail = scanner.nextLine().trim();
        if (nuevoEmail.isEmpty()) nuevoEmail = usuario.getEmail();
        
        try {
            if (!nuevoEmail.equals(usuario.getEmail())) {
                usuario.setEmail(nuevoEmail);
            } else {
                System.out.println("‚ùå No hay cambios que realizar.");
                pausar();
                return;
            }
            
            Usuario resultado = actualizarUsuarioCasoUso.ejecutar(usuario);
            System.out.println("‚úÖ Usuario actualizado exitosamente:");
            mostrarUsuario(resultado);
        } catch (Exception e) {
            System.out.println("‚ùå Error al actualizar usuario: " + e.getMessage());
        }
        
        pausar();
    }
    
    private void eliminarUsuario() {
        System.out.println("\n‚ïê‚ïê‚ïê ELIMINAR USUARIO ‚ïê‚ïê‚ïê");
        
        Usuario usuario = seleccionarUsuario();
        if (usuario == null) return;
        
        System.out.println("Usuario a eliminar:");
        mostrarUsuario(usuario);
        
        System.out.print("¬øEst√°s seguro de eliminar este usuario? (s/N): ");
        String confirmacion = scanner.nextLine().trim().toLowerCase();
        
        if (confirmacion.equals("s") || confirmacion.equals("si")) {
            try {
                eliminarUsuarioCasoUso.ejecutar(usuario);
                System.out.println("‚úÖ Usuario eliminado exitosamente.");
            } catch (Exception e) {
                System.out.println("‚ùå Error al eliminar usuario: " + e.getMessage());
            }
        } else {
            System.out.println("‚ùå Eliminaci√≥n cancelada.");
        }
        
        pausar();
    }
    
    /**
     * M√©todo p√∫blico para que otros controllers puedan seleccionar usuarios.
     */
    public Usuario seleccionarUsuario() {
        System.out.print("Ingresa criterio para buscar el usuario: ");
        String criterio = scanner.nextLine().trim();
        
        try {
            List<Usuario> usuarios = buscarUsuariosCasoUso.ejecutar(criterio);
            
            if (usuarios.isEmpty()) {
                System.out.println("‚ùå No se encontraron usuarios.");
                return null;
            }
            
            if (usuarios.size() == 1) {
                return usuarios.get(0);
            }
            
            System.out.println("M√∫ltiples usuarios encontrados:");
            for (int i = 0; i < usuarios.size(); i++) {
                System.out.printf("%d. ", i + 1);
                mostrarUsuario(usuarios.get(i));
                System.out.println();
            }
            
            System.out.print("Selecciona el n√∫mero de usuario: ");
            int seleccion = leerOpcion();
            
            if (seleccion > 0 && seleccion <= usuarios.size()) {
                return usuarios.get(seleccion - 1);
            } else {
                System.out.println("‚ùå Selecci√≥n no v√°lida.");
                return null;
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Error al buscar usuarios: " + e.getMessage());
            return null;
        }
    }
    
    public void mostrarUsuario(Usuario usuario) {
        System.out.printf("ID: %d | %s | %s", 
            usuario.getId(),
            usuario.getNombreCompleto(), 
            usuario.getEmail());
    }
    
    private int leerOpcion() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    private void pausar() {
        System.out.println("\nPresiona Enter para continuar...");
        scanner.nextLine();
    }
}